'use strict';

var Promise = require('promise'),
	validator = require('validator'),
	crypto = require('crypto'),
	config  = require("mj-config");

/**
 * validate the JSON payload
 * @params JSON string: inpData
 * @returns promise state (resolve, reject)
*/
function isValidJson(inpData) {
    return new Promise(function (resolve,reject) {
		inpData = typeof inpData !== "string" ? JSON.stringify(inpData) : inpData;
		try {
			inpData = JSON.parse(inpData);
		} catch (e) {
			return reject("E501");
		}
		if (typeof inpData === "object" && inpData !== null) return resolve(inpData.reqData);
		return reject("E501");
    });
}

/**
 * validate the given email address
 * @params string: emailAddress
 * @returns promise state (resolve, reject)
*/
function isValidEmailAddress(emailAddress) {
    return new Promise(function (resolve,reject) {
		if(emailAddress === "") return reject("E502");
		var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		if(emailRegex.test(emailAddress) && validator.isEmail(emailAddress)) {
			return resolve();
		}
		return reject("E502");
    });
}

/**
 * validate the given mobile number
 * @params string: mobileNumber
 * @returns promise state (resolve, reject)
*/
function isValidMobileNumber(mobileNumber) {
    return new Promise(function (resolve,reject) {
		if(mobileNumber === "") return reject("E503");
		if(validator.isMobilePhone(mobileNumber,'en-GB')) {
			return resolve();
		} 
		return reject("E503");
    });
}

/**
 * add debug logs if debug mode true
 * @params string: logMe
 * @returns void
*/
function log(logMe) {
	if(config.debug) console.log(logMe);
}

/**
 * shorten phone number for display
 * @params array: data
 * @returns array: data
*/
function shortPhoneNumber(data) {
	for(var i=0; i< data.length; i++) {
		data[i].mobile = decrypt(data[i].mobile);
		data[i].mobile = data[i].mobile.substr(data[i].mobile.length - 4);
	}
	return data;
}

/**
 * encryt data
 * @params string: text
 * @returns string: crypted
*/
function encrypt(text){
	var cipher = crypto.createCipher(config.algorithm,config.password)
	var crypted = cipher.update(text,'utf8','hex')
	crypted += cipher.final('hex');
	return crypted;
}
 
/**
 * decrypt data
 * @params string: text
 * @returns string: dec
*/
function decrypt(text){
	var decipher = crypto.createDecipher(config.algorithm,config.password)
	var dec = decipher.update(text,'hex','utf8')
	dec += decipher.final('utf8');
	return dec;
}

/**
 * decrypt password
 * @params array: data
 * @returns array: data
*/
function decryptPassword(data) {
	for(var i=0; i< data.length; i++) {
		data[i].password = decrypt(data[i].password);
	}
	return data;
}

var common = {

	isValidJson: isValidJson,
	isValidEmailAddress: isValidEmailAddress,
	isValidMobileNumber: isValidMobileNumber,
	log: log,
	shortPhoneNumber: shortPhoneNumber,
	encrypt: encrypt,
	decrypt: decrypt,
	decryptPassword: decryptPassword

}

module.exports = common;
